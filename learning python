print(int(True))
print(int(False))
print(bool(1))
print(bool(0))

x= 'James'
print(x[0])
print(x[-1])

#slicing using "::"
print(x[::2]) # for every 2 character in the string, the character is isolated out

#outcome = Jms

#slicing using ":"
print(x[0:2])
#outcome Ja

y = "James" + " is hot"
# remember to to have spacing
print(y)

z = "Bill \nis hot"
#spacing is considered as well
print(z)

#\t = tab
a = "Bill \tis hot"
#outcome = Bill     is hot

# \\ = \
b = "Bill \\is hot"
# outcome = Bill \is hot
print(b)

# r
print(r"Michael \is hot")
# outcome = Michael \is hot

c= b.upper()
print(c)

c = b.replace("Bill", "Yi An")
print(c)

print(f"Statement: {c}")

#list []
L = ["Michael Jackson", 1, 2]
print(L[0])
print(L[-3])

A = [1, 3, ["Akana", "Bert"], (1, "Jayce")] #list can contain other lists and tuples, aka nesting as well
print(A[3][1][1])
#output = a

#extend can only give one argument at a time
A.extend(["Conner", "Tim"])
print(A)
#output = [1, 3, ['Akana', 'Bert'], (1, 'Jayce'), 'Conner', 'Tim']
#if argument is A.extend("Conner", "Tim") without []
#Error is encountered

#use [:] to clone a list, if the original list is altered, the clone will not follow the change
A = ["rock", 10]
B = A[:]
A[0] = "stone"
print (A)
print (B)
# A = ["stone", 10]
# B = ["rock", 10]

# Python Quiz (Coursera)
# Create a list a_list, with the following elements 1, hello, [1,2,3] and True
# Find the value stored at index 1 of a_list
# Retrieve the elements stored at index 1, 2 and 3 of a_list

a_list = [1, "hello", [1, 2, 3], "True"]
print(a_list[1])
print(a_list[1:])

# Concatenate the following lists A = [1, 'a'] and B = [2, 1, 'd']
A = [1, "a"]
B = [2, 1, "d"]
C = A + B
print(C)

Thing = {
    "Dean" : "15", #remember to use "," to seperate each objects
    "Karl": "15",
    "JH": "13",
    "11": "14",
    "Oscar": "13.5"
}

print(Thing["11"])

#Sets quiz @Coursera
#Convert the list ['rap','house','electronic music', 'rap'] to a set:
list = ['rap', 'house', 'electronic music', 'rap']
set = set(list)
print(set)

# Consider the list A = [1, 2, 2, 1] and set B = set([1, 2, 2, 1]), does sum(A) == sum(B)?
A = [1, 2, 2, 1]
B = set([1, 2, 2, 1])
print(f"Are the sums equal? {sum(A) == sum(B)}")

# Create a new set album_set3 that is the union of album_set1 and album_set2
album_set1 = {"Thriller", 'AC/DC', 'Back in Black'}
album_set2 = {"AC/DC", "Back in Black", "The Dark Side of the Moon"}
album_set3 = album_set1.union(album_set2)
print(album_set3)

# Find out if album_set1 is a subset of album_set3:
print(album_set1.issubset(album_set3))

# Coursera exercise
# Write a while loop to display the values of the Rating of an album playlist stored in the list PlayListRatings. 
# If the score is less than 6, exit the loop. The list PlayListRatings is given by: PlayListRatings = [10, 9.5, 10, 8, 7.5, 5, 10, 10]
PlayListRatings = [10, 9.5, 10, 8, 7.5, 5, 10, 10]
Ratings = []
i = 0
while PlayListRatings[i] >= 6:
    Ratings.append(PlayListRatings[i])
    i = i +1
print(Ratings)
print(f"It took {i} times to break out of the loop"}

# Write a for loop that prints out the following list: squares=['red', 'yellow', 'green', 'purple', 'blue']
squares = ["red", "yellow", "green", "purple", "blue"]

for square in squares:
    print(f"The colour is {square}")

#functions using def
def Stuff(stuff):
    for i,s in enumerate(stuff):
        print(f"Album {i+1}'s rating is {s}.")

albums_rates = [10, 9, 8]
Stuff(albums_rates)

def habits(h):
    for i, habit in enumerate(h):
        print(f"Sequence {i+1} is {habit.lower()}.")


list1 = ["Read books", "Workout", "Learn python"]
habits(list1)
